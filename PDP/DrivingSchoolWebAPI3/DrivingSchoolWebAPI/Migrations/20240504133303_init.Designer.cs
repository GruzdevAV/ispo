// <auto-generated />
using System;
using DrivingSchoolAPIModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrivingSchoolWebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240504133303_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DrivingSchoolAPIModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePictureBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ec2d8787-e86e-426a-880d-c2b75ce91e11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff75c0ac-f6b9-4869-9b1e-89973ea6bd59",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mattie",
                            LastName = "Williams",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGSWEP8+QP6CGd2xG4/VMFGYNd0U/OPNpLZmvhAk5hQ4fbsbPAH8Li1+rwTyZdJYvA==",
                            Patronym = "Charlotte",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "263b4429-aa78-4149-8f51-7116c5a9a62b",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "3e6063e3-901c-4e34-a854-ffcd5a1eec14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8d8f32b-51de-45a9-a280-ef29cef63a70",
                            Email = "Instructor0@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nelson",
                            LastName = "Rodriguez",
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR0@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR0@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGQp8qW9HIzlo4y8vQjohzdGpMytdEYAGl3qyGTddxwBsM87nipwU/DmQvM/lncC7w==",
                            Patronym = "Louis",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44f5a444-b3f9-4b9e-a364-8efefddd7f27",
                            TwoFactorEnabled = false,
                            UserName = "Instructor0@example.com"
                        },
                        new
                        {
                            Id = "6b011e27-afd5-4c3a-8842-10f18e89033d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70b10371-6a4c-4dc4-9deb-35611c76d0a9",
                            Email = "Instructor1@example.com",
                            EmailConfirmed = false,
                            FirstName = "Morales",
                            LastName = "Myers",
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR1@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKIWekqZFGqUoRmLQjEVcBUP7J/W1UV4LZpB0GCaBlX7ZFVlUoyCIkNdb7gwOQ61bg==",
                            Patronym = "Brooks",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fee2f89c-25e0-40d8-bca2-797f418a3f5f",
                            TwoFactorEnabled = false,
                            UserName = "Instructor1@example.com"
                        },
                        new
                        {
                            Id = "ba1961f7-d5ad-4446-8752-43265868350e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3a9393f-1a10-4eb8-b9e7-49942633418c",
                            Email = "Instructor2@example.com",
                            EmailConfirmed = false,
                            FirstName = "Chambers",
                            LastName = "Mattie",
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR2@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBMzrpoVWlp1jSlAgBmcmsMyaJ3f0GzmqWxVfCwkZNp+O+/NH/ioZWW1pxI/tXMnwg==",
                            Patronym = "Eleanor",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "681d4e21-8057-4d62-a6ff-f7cf6a1faca5",
                            TwoFactorEnabled = false,
                            UserName = "Instructor2@example.com"
                        },
                        new
                        {
                            Id = "ef444d72-a812-45cc-aa27-6e6cba8b4dec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa6be2e0-10fd-43da-a924-2d0a920dae38",
                            Email = "Instructor3@example.com",
                            EmailConfirmed = false,
                            FirstName = "Elaine",
                            LastName = "Dorothy",
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR3@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPteOga7e9s7EeQ1FvgdMGwchLJDMusrICUyXUpiLtbg5cPgHoqVQITGUPtgd17XvQ==",
                            Patronym = "Curtis",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c05ef301-5d7d-4649-87bc-6c9fddee1a70",
                            TwoFactorEnabled = false,
                            UserName = "Instructor3@example.com"
                        },
                        new
                        {
                            Id = "5eb6a37c-e12d-4bb1-b404-c0e7c1b0cc23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c874f45c-eb6b-4518-8f08-6275d238d95f",
                            Email = "Instructor4@example.com",
                            EmailConfirmed = false,
                            FirstName = "Chambers",
                            LastName = "Louis",
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR4@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAofazjP3Hchk2ZrtUxhyNTWhx0XpQpjhbOrNcZZFqrqgqhhdtXzUYpFh4yyETniGA==",
                            Patronym = "Murphy",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1d9c7b1-5431-471f-93f9-ebb121b69366",
                            TwoFactorEnabled = false,
                            UserName = "Instructor4@example.com"
                        },
                        new
                        {
                            Id = "c2d36f8c-ebaf-4d10-a446-f381dd0f0ae5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "644c8f4f-f644-440f-bf67-8718062fa300",
                            Email = "Student0@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ronnie",
                            LastName = "Chambers",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT0@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT0@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEELpXJwCRXiq2l05iMB45QvKrlCSYiWlvlEGDpb56+AhPqWAQCk4IXWgF5IYjnvDBA==",
                            Patronym = "Saunders",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94e737e5-85a0-4d06-bc7d-98349b816f1e",
                            TwoFactorEnabled = false,
                            UserName = "Student0@example.com"
                        },
                        new
                        {
                            Id = "6fa6554c-47a9-4cc4-8a65-cb3d00ab898a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "afa2f221-33c9-4177-add3-717c35a33829",
                            Email = "Student1@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ronnie",
                            LastName = "Stacey",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT1@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDCC8nk6IoIZGmaidGNnQtkFca0MNCKV/UC/sORF/6oFNJ7oJTToKo8NZiiZe2SG4A==",
                            Patronym = "Flores",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b605b244-63e4-4955-979d-433074544f3b",
                            TwoFactorEnabled = false,
                            UserName = "Student1@example.com"
                        },
                        new
                        {
                            Id = "6ccdaac6-6f55-4459-a9eb-1919dd2387e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2bf3415-afe1-466b-871e-b79b788ee4ba",
                            Email = "Student2@example.com",
                            EmailConfirmed = false,
                            FirstName = "Washington",
                            LastName = "Crawford",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENFOB2SY5qso3XTSped5lQaNCHG1jCrT7S4QQdACu29Aqm5aM7mpxHZZZsrZkjxIHg==",
                            Patronym = "Angela",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27103a48-e890-4f14-b055-8bd245c1592d",
                            TwoFactorEnabled = false,
                            UserName = "Student2@example.com"
                        },
                        new
                        {
                            Id = "4a1ea45b-1dc8-4fc5-9464-d5059a2255b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c74533c-cd1b-4cfe-92a3-320ff6d83024",
                            Email = "Student3@example.com",
                            EmailConfirmed = false,
                            FirstName = "Miles",
                            LastName = "Rodney",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT3@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENhzf7NmuloEZGVvqz8bIHJsnXvAJiH9PjfVqn0+CI3/VhR6HsAjySaJCDeNgvl2zQ==",
                            Patronym = "Amy",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16adc952-888d-460f-abb4-16ef08e3fb02",
                            TwoFactorEnabled = false,
                            UserName = "Student3@example.com"
                        },
                        new
                        {
                            Id = "fc6f240a-9935-40a7-9a94-1b25d6be551c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76e6b8ed-643b-4a52-a7cb-df6b9be7a8a4",
                            Email = "Student4@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jeremy",
                            LastName = "Stacey",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT4@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEnTYA/RLUhFlBj7LRHhuVmMnZkDOSHhPUNzXREyAH4QLpsS1uGtRuNFDazBn5S+ew==",
                            Patronym = "Williams",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9ae3a8a-740a-4a6d-b3c5-3f0bbb2f69f5",
                            TwoFactorEnabled = false,
                            UserName = "Student4@example.com"
                        });
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("InnerScheduleOfInstructorId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("InnerScheduleOfInstructorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.GradeByInstructorToStudent", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.HasKey("ClassId");

                    b.ToTable("GradesByInstructorToStudent");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.GradeByStudentToInstructor", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.HasKey("ClassId");

                    b.ToTable("GradesByStudentToInstructor");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.InnerScheduleOfInstructor", b =>
                {
                    b.Property<int>("InnerScheduleOfInstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InnerScheduleOfInstructorId"));

                    b.Property<DateOnly>("DayOfWork")
                        .HasColumnType("date");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int?>("OuterScheduleId")
                        .HasColumnType("int");

                    b.HasKey("InnerScheduleOfInstructorId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("OuterScheduleId");

                    b.ToTable("InnerSchedulesOfInstructors");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InstructorId");

                    b.HasIndex("UserId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            InstructorId = 1,
                            UserId = "3e6063e3-901c-4e34-a854-ffcd5a1eec14"
                        },
                        new
                        {
                            InstructorId = 2,
                            UserId = "6b011e27-afd5-4c3a-8842-10f18e89033d"
                        },
                        new
                        {
                            InstructorId = 3,
                            UserId = "ba1961f7-d5ad-4446-8752-43265868350e"
                        },
                        new
                        {
                            InstructorId = 4,
                            UserId = "ef444d72-a812-45cc-aa27-6e6cba8b4dec"
                        },
                        new
                        {
                            InstructorId = 5,
                            UserId = "5eb6a37c-e12d-4bb1-b404-c0e7c1b0cc23"
                        });
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.OuterScheduleOfInstructor", b =>
                {
                    b.Property<int>("OuterScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OuterScheduleId"));

                    b.Property<string>("ClassesRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatesOfClassesRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeClassExampleRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleSheetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleSheetPageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("NotFreeClassExampleRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimesOfClassesRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OuterScheduleId");

                    b.HasIndex("InstructorId");

                    b.ToTable("OuterSchedulesOfInstructors");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            UserId = "c2d36f8c-ebaf-4d10-a446-f381dd0f0ae5"
                        },
                        new
                        {
                            StudentId = 2,
                            UserId = "6fa6554c-47a9-4cc4-8a65-cb3d00ab898a"
                        },
                        new
                        {
                            StudentId = 3,
                            UserId = "6ccdaac6-6f55-4459-a9eb-1919dd2387e7"
                        },
                        new
                        {
                            StudentId = 4,
                            UserId = "4a1ea45b-1dc8-4fc5-9464-d5059a2255b0"
                        },
                        new
                        {
                            StudentId = 5,
                            UserId = "fc6f240a-9935-40a7-9a94-1b25d6be551c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "abe9d1cc-fcd7-44c6-a097-6f6b7f959390",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b416bc56-f1c4-473f-b4e4-f93abb8ad90a",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "d4284e2e-82bd-4aae-9fa8-71de003b5cba",
                            Name = "Instructor",
                            NormalizedName = "INSTRUCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ec2d8787-e86e-426a-880d-c2b75ce91e11",
                            RoleId = "abe9d1cc-fcd7-44c6-a097-6f6b7f959390"
                        },
                        new
                        {
                            UserId = "3e6063e3-901c-4e34-a854-ffcd5a1eec14",
                            RoleId = "d4284e2e-82bd-4aae-9fa8-71de003b5cba"
                        },
                        new
                        {
                            UserId = "6b011e27-afd5-4c3a-8842-10f18e89033d",
                            RoleId = "d4284e2e-82bd-4aae-9fa8-71de003b5cba"
                        },
                        new
                        {
                            UserId = "ba1961f7-d5ad-4446-8752-43265868350e",
                            RoleId = "d4284e2e-82bd-4aae-9fa8-71de003b5cba"
                        },
                        new
                        {
                            UserId = "ef444d72-a812-45cc-aa27-6e6cba8b4dec",
                            RoleId = "d4284e2e-82bd-4aae-9fa8-71de003b5cba"
                        },
                        new
                        {
                            UserId = "5eb6a37c-e12d-4bb1-b404-c0e7c1b0cc23",
                            RoleId = "d4284e2e-82bd-4aae-9fa8-71de003b5cba"
                        },
                        new
                        {
                            UserId = "c2d36f8c-ebaf-4d10-a446-f381dd0f0ae5",
                            RoleId = "b416bc56-f1c4-473f-b4e4-f93abb8ad90a"
                        },
                        new
                        {
                            UserId = "6fa6554c-47a9-4cc4-8a65-cb3d00ab898a",
                            RoleId = "b416bc56-f1c4-473f-b4e4-f93abb8ad90a"
                        },
                        new
                        {
                            UserId = "6ccdaac6-6f55-4459-a9eb-1919dd2387e7",
                            RoleId = "b416bc56-f1c4-473f-b4e4-f93abb8ad90a"
                        },
                        new
                        {
                            UserId = "4a1ea45b-1dc8-4fc5-9464-d5059a2255b0",
                            RoleId = "b416bc56-f1c4-473f-b4e4-f93abb8ad90a"
                        },
                        new
                        {
                            UserId = "fc6f240a-9935-40a7-9a94-1b25d6be551c",
                            RoleId = "b416bc56-f1c4-473f-b4e4-f93abb8ad90a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Class", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.InnerScheduleOfInstructor", "InnerScheduleOfInstructor")
                        .WithMany()
                        .HasForeignKey("InnerScheduleOfInstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPIModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("InnerScheduleOfInstructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.GradeByInstructorToStudent", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.GradeByStudentToInstructor", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.InnerScheduleOfInstructor", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPIModels.OuterScheduleOfInstructor", "OuterScheduleOfInstructor")
                        .WithMany()
                        .HasForeignKey("OuterScheduleId");

                    b.Navigation("Instructor");

                    b.Navigation("OuterScheduleOfInstructor");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Instructor", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.OuterScheduleOfInstructor", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Student", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
