// <auto-generated />
using System;
using DrivingSchoolAPIModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrivingSchoolWebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DrivingSchoolAPIModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b211d8c1-7076-4dfc-8952-8652d66db07a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "705200e7-99c2-4ea0-8672-0f3433582ca6",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEqP6yd9tSf+Gq0Bj+MK4FI5OoI4cbZd9Yfxj58q/+R8hsU2n2xxsWJuKJihTWx1fw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b237c846-5afa-4fc0-b43e-738c0ee6c722",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "6cc40534-fe85-46d4-9926-0ba27e9e976d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f570a3b-d3a0-4a28-8e05-a88e16ac1d75",
                            Email = "Instructor0@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR0@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR0@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJNNXRHcbZbAw11YwyNmteVGotDH7lbAa+t/pYIoz0h3iikG3+W7n/2tbzcnLGK8NA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ef97b4b-5cbd-4d3c-ad72-ee89cae5c17d",
                            TwoFactorEnabled = false,
                            UserName = "Instructor0@example.com"
                        },
                        new
                        {
                            Id = "5e4b2e26-0835-4a11-ae3a-c00f2115ec34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bfc1f80c-3e76-4182-bf36-fc5fe96b1a3c",
                            Email = "Instructor1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR1@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEASWRJhdmZhltp+TQVgdIxohX0fEGgK7bbO/2a/WlIkC4tBPtcrqtTdP3iatnaQPcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a75fc63-8d25-4a31-a7c5-a8c46badf030",
                            TwoFactorEnabled = false,
                            UserName = "Instructor1@example.com"
                        },
                        new
                        {
                            Id = "c0267e6f-dea9-4fe3-b02d-31a53ffb66be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57412aac-452b-46e0-b209-577d2496fde5",
                            Email = "Instructor2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR2@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK8hgSAmsr/aGFtZXmecW9AixDxny/irhVG79P8468EqysBoGUB8+hLJwm3H/ne/kA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ac7eb05-5ba2-4556-87e6-8fba42f52bcb",
                            TwoFactorEnabled = false,
                            UserName = "Instructor2@example.com"
                        },
                        new
                        {
                            Id = "0b68d11c-b737-4bb4-b2c3-1e054734de16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9bc561c6-8297-48c9-a038-d0bef001b167",
                            Email = "Instructor3@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR3@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELcsm6pyP5QRPU5XVRCp2YqmdSjPQk9uYV2KLGp+ejwr6FabXaBdCyF2GIrzzCJaTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd7a2979-a4a8-4cd4-bc1c-59132db6483f",
                            TwoFactorEnabled = false,
                            UserName = "Instructor3@example.com"
                        },
                        new
                        {
                            Id = "5bcf6870-4a90-45ba-9ab4-546d7b9753f2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c4a4639-9ea3-46b1-8519-4f047af45e84",
                            Email = "Instructor4@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR4@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBfQviM7yiO8p8JRDhOXksVemUQBAOgHRO9VVnBr6mY6veKSEX01E+hjMsuBQPVcvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc942fca-e480-4a32-b663-bb3842361d34",
                            TwoFactorEnabled = false,
                            UserName = "Instructor4@example.com"
                        },
                        new
                        {
                            Id = "e7cf6263-fe14-452a-9e8d-84ab4154cad9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd404765-47d8-4952-bdc6-6d0e7a3d63c5",
                            Email = "Student0@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT0@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT0@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMfyKuvtxsVBNL+cPqDA0QPhsPkG334byuFc1rILvTRJ3d7lGAKckBgz+Gbbp+QKsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21b347cd-cd80-48c8-85a5-c54a1a2bcbda",
                            TwoFactorEnabled = false,
                            UserName = "Student0@example.com"
                        },
                        new
                        {
                            Id = "7504afc7-322e-491c-b8db-691a8b7bb066",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15949e6f-8a5a-4226-a554-9337445e5b01",
                            Email = "Student1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT1@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDJNZVaYHxThhDok0cCm0tLMFeCM6Jb6QEnnGcVOBTYbZmfRULWBdvlQ9I3MR9UOmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9004d0b4-1c14-4eb4-be3a-a42b08de8870",
                            TwoFactorEnabled = false,
                            UserName = "Student1@example.com"
                        },
                        new
                        {
                            Id = "1b7dafc3-feb9-4ad7-b12e-014b6ad84f89",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1b905be-f259-41c2-ad0e-14a71f4db70a",
                            Email = "Student2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECCmq7m61TwYLCH3zU6gLMBqLY8hE1+NONiPJiuWK6YJ3lEz7RjOMefFBAeK6k5gPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fbbca68-a001-419b-be0e-3db8c77ec12f",
                            TwoFactorEnabled = false,
                            UserName = "Student2@example.com"
                        },
                        new
                        {
                            Id = "5b6fb9d6-696c-45f0-a39e-38dbb8e4712d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "016155b0-2386-407b-b81b-7192bb963722",
                            Email = "Student3@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT3@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO/WaNV7d+j7ZKo9YX8En8IXSY5pHsIgBrnDsxUUoDfZ7TBEEv+ssXl5ppsdkV+ezw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a38d44dd-0f17-4d95-8ee3-be4294b87f5f",
                            TwoFactorEnabled = false,
                            UserName = "Student3@example.com"
                        },
                        new
                        {
                            Id = "3b91d4b7-37db-4b1e-8954-ade244999d51",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f76f0ee-043e-44f8-9c64-a04dc5e43f00",
                            Email = "Student4@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT4@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP++oVeTl2o7/VC6bZcYDBygQ+RtI2hKp9lwq3BG15gTBdd5rs+1nUPBkRaEWxm9hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2495f7e-a8a3-4cd5-afbd-08b756465be2",
                            TwoFactorEnabled = false,
                            UserName = "Student4@example.com"
                        });
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("InnerScheduleOfInstructorId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("InnerScheduleOfInstructorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.GradeByInstructorToStudent", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.HasKey("ClassId");

                    b.ToTable("GradesByInstructorToStudent");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.GradeByStudentToInstructor", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.HasKey("ClassId");

                    b.ToTable("GradesByStudentToInstructor");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.InnerScheduleOfInstructor", b =>
                {
                    b.Property<int>("InnerScheduleOfInstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InnerScheduleOfInstructorId"));

                    b.Property<DateOnly>("DayOfWork")
                        .HasColumnType("date");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int?>("OuterScheduleId")
                        .HasColumnType("int");

                    b.HasKey("InnerScheduleOfInstructorId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("OuterScheduleId");

                    b.ToTable("InnerSchedulesOfInstructors");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InstructorId");

                    b.HasIndex("UserId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            InstructorId = 1,
                            FirstName = "Elaine",
                            LastName = "Jamie",
                            Patronym = "Charlotte",
                            UserId = "6cc40534-fe85-46d4-9926-0ba27e9e976d"
                        },
                        new
                        {
                            InstructorId = 2,
                            FirstName = "Mary",
                            LastName = "Mary",
                            Patronym = "Jackson",
                            UserId = "5e4b2e26-0835-4a11-ae3a-c00f2115ec34"
                        },
                        new
                        {
                            InstructorId = 3,
                            FirstName = "Sara",
                            LastName = "Miles",
                            Patronym = "Williams",
                            UserId = "c0267e6f-dea9-4fe3-b02d-31a53ffb66be"
                        },
                        new
                        {
                            InstructorId = 4,
                            FirstName = "Crawford",
                            LastName = "Brown",
                            Patronym = "Crawford",
                            UserId = "0b68d11c-b737-4bb4-b2c3-1e054734de16"
                        },
                        new
                        {
                            InstructorId = 5,
                            FirstName = "Elaine",
                            LastName = "Douglas",
                            Patronym = "Mary",
                            UserId = "5bcf6870-4a90-45ba-9ab4-546d7b9753f2"
                        });
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.OuterScheduleOfInstructor", b =>
                {
                    b.Property<int>("OuterScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OuterScheduleId"));

                    b.Property<string>("ClassesRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatesOfClassesRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeClassExampleRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleSheetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleSheetPageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("NotFreeClassExampleRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimesOfClassesRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OuterScheduleId");

                    b.HasIndex("InstructorId");

                    b.ToTable("OuterSchedulesOfInstructors");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            FirstName = "Gill",
                            LastName = "Mattie",
                            Patronym = "Jeremy",
                            UserId = "e7cf6263-fe14-452a-9e8d-84ab4154cad9"
                        },
                        new
                        {
                            StudentId = 2,
                            FirstName = "Jackson",
                            LastName = "Murphy",
                            Patronym = "Douglas",
                            UserId = "7504afc7-322e-491c-b8db-691a8b7bb066"
                        },
                        new
                        {
                            StudentId = 3,
                            FirstName = "Nelson",
                            LastName = "Amy",
                            Patronym = "Saunders",
                            UserId = "1b7dafc3-feb9-4ad7-b12e-014b6ad84f89"
                        },
                        new
                        {
                            StudentId = 4,
                            FirstName = "Stacey",
                            LastName = "Timothy",
                            Patronym = "Stacey",
                            UserId = "5b6fb9d6-696c-45f0-a39e-38dbb8e4712d"
                        },
                        new
                        {
                            StudentId = 5,
                            FirstName = "Washington",
                            LastName = "Charlotte",
                            Patronym = "Elaine",
                            UserId = "3b91d4b7-37db-4b1e-8954-ade244999d51"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "068aefff-3046-4157-80a4-06d71d20ad34",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "918f5dbd-de7f-4531-aebe-9e51ce4d69fc",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "73e22705-bb8d-44f4-827d-c3f2bd189a10",
                            Name = "Instructor",
                            NormalizedName = "INSTRUCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b211d8c1-7076-4dfc-8952-8652d66db07a",
                            RoleId = "068aefff-3046-4157-80a4-06d71d20ad34"
                        },
                        new
                        {
                            UserId = "6cc40534-fe85-46d4-9926-0ba27e9e976d",
                            RoleId = "73e22705-bb8d-44f4-827d-c3f2bd189a10"
                        },
                        new
                        {
                            UserId = "5e4b2e26-0835-4a11-ae3a-c00f2115ec34",
                            RoleId = "73e22705-bb8d-44f4-827d-c3f2bd189a10"
                        },
                        new
                        {
                            UserId = "c0267e6f-dea9-4fe3-b02d-31a53ffb66be",
                            RoleId = "73e22705-bb8d-44f4-827d-c3f2bd189a10"
                        },
                        new
                        {
                            UserId = "0b68d11c-b737-4bb4-b2c3-1e054734de16",
                            RoleId = "73e22705-bb8d-44f4-827d-c3f2bd189a10"
                        },
                        new
                        {
                            UserId = "5bcf6870-4a90-45ba-9ab4-546d7b9753f2",
                            RoleId = "73e22705-bb8d-44f4-827d-c3f2bd189a10"
                        },
                        new
                        {
                            UserId = "e7cf6263-fe14-452a-9e8d-84ab4154cad9",
                            RoleId = "918f5dbd-de7f-4531-aebe-9e51ce4d69fc"
                        },
                        new
                        {
                            UserId = "7504afc7-322e-491c-b8db-691a8b7bb066",
                            RoleId = "918f5dbd-de7f-4531-aebe-9e51ce4d69fc"
                        },
                        new
                        {
                            UserId = "1b7dafc3-feb9-4ad7-b12e-014b6ad84f89",
                            RoleId = "918f5dbd-de7f-4531-aebe-9e51ce4d69fc"
                        },
                        new
                        {
                            UserId = "5b6fb9d6-696c-45f0-a39e-38dbb8e4712d",
                            RoleId = "918f5dbd-de7f-4531-aebe-9e51ce4d69fc"
                        },
                        new
                        {
                            UserId = "3b91d4b7-37db-4b1e-8954-ade244999d51",
                            RoleId = "918f5dbd-de7f-4531-aebe-9e51ce4d69fc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Class", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.InnerScheduleOfInstructor", "InnerScheduleOfInstructor")
                        .WithMany()
                        .HasForeignKey("InnerScheduleOfInstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPIModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("InnerScheduleOfInstructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.GradeByInstructorToStudent", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.GradeByStudentToInstructor", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.InnerScheduleOfInstructor", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPIModels.OuterScheduleOfInstructor", "OuterScheduleOfInstructor")
                        .WithMany()
                        .HasForeignKey("OuterScheduleId");

                    b.Navigation("Instructor");

                    b.Navigation("OuterScheduleOfInstructor");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Instructor", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.OuterScheduleOfInstructor", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Student", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
